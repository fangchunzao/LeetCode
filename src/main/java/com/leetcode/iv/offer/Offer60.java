package com.leetcode.iv.offer;

/**
 * description 面试题60. n个骰子的点数
 * 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
 * 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
 *
 * 示例 1:
 * 输入: 1
 * 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
 * 示例 2:
 *
 * 输入: 2
 * 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
 *
 * 限制：
 * 1 <= n <= 11
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author fcz
 * @since  2020-06-09 14:49
 **/
public class Offer60 {

    public static void main(String[] args) {

    }

    /**
     * 动态规划
     * 可以拆解问题为N个骰子的点数分解为 n-1个骰子的点数加上一个骰子的点数
     * 通过上一个骰子点数的概率来计算出当前骰子点数的概率
     * 已知1的点数概率数组为{1/6d,1/6d,1/6d,1/6d,1/6d,1/6d}
     * 当 N=2时 {1/6*1/6, 1/6*1/6 + 1/6*1/6, 1/6*1/6 + 1/6*1/6 + 1/6*1/6,
     * 1/6*1/6 + 1/6*1/6 + 1/6*1/6+ 1/6*1/6, ......}
     */
    public double[] twoSum(int n) {
        // 1个骰子的点数概率
        double[] init = new double[] {1/6d,1/6d,1/6d,1/6d,1/6d,1/6d};
        // i代表N个骰子
        for (int i = 2; i <= n; i++) {
            // 扩容新数组 当前i个骰子的结果数组
            double[] temp = new double[5 * i + 1];
            // 遍历之前的每一个点数概率
            for (int j = 0; j < init.length; j++) {
                // 累加到新数组上
                for (int k = 0; k < 6; k++) {
                    temp[j + k] += init[j] / 6;
                }
            }
            init = temp;
        }
        return init;
    }

}
